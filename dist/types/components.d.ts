import './stencil.core';
/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import './stencil.core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import '@code-dimension/stencil-components';


declare global {

  namespace StencilComponents {
    interface QuantumEditor {
      'config': string;
      'displayMessages': boolean;
      'heightLine': number;
      'heightPx': any;
      'horizontalLayout': boolean;
      'showDataviz': boolean;
      'theme': string;
      'url': string;
      'warpscript': string;
      'widthPx': number;
    }
  }

  interface HTMLQuantumEditorElement extends StencilComponents.QuantumEditor, HTMLStencilElement {}

  var HTMLQuantumEditorElement: {
    prototype: HTMLQuantumEditorElement;
    new (): HTMLQuantumEditorElement;
  };
  interface HTMLElementTagNameMap {
    'quantum-editor': HTMLQuantumEditorElement;
  }
  interface ElementTagNameMap {
    'quantum-editor': HTMLQuantumEditorElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'quantum-editor': JSXElements.QuantumEditorAttributes;
    }
  }
  namespace JSXElements {
    export interface QuantumEditorAttributes extends HTMLAttributes {
      'config'?: string;
      'displayMessages'?: boolean;
      'heightLine'?: number;
      'heightPx'?: any;
      'horizontalLayout'?: boolean;
      'onDatavizRequested'?: (event: CustomEvent) => void;
      'onErrorEvent'?: (event: CustomEvent) => void;
      'onStatusEvent'?: (event: CustomEvent) => void;
      'onWarpscriptChanged'?: (event: CustomEvent) => void;
      'onWarpscriptResult'?: (event: CustomEvent) => void;
      'showDataviz'?: boolean;
      'theme'?: string;
      'url'?: string;
      'warpscript'?: string;
      'widthPx'?: number;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface QuantumResult {
      'config': string;
      'displayMessages': boolean;
      'result': string;
      'theme': string;
    }
  }

  interface HTMLQuantumResultElement extends StencilComponents.QuantumResult, HTMLStencilElement {}

  var HTMLQuantumResultElement: {
    prototype: HTMLQuantumResultElement;
    new (): HTMLQuantumResultElement;
  };
  interface HTMLElementTagNameMap {
    'quantum-result': HTMLQuantumResultElement;
  }
  interface ElementTagNameMap {
    'quantum-result': HTMLQuantumResultElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'quantum-result': JSXElements.QuantumResultAttributes;
    }
  }
  namespace JSXElements {
    export interface QuantumResultAttributes extends HTMLAttributes {
      'config'?: string;
      'displayMessages'?: boolean;
      'result'?: string;
      'theme'?: string;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
