/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import '@code-dimension/stencil-components';


declare global {

  namespace StencilComponents {
    interface WarpViewEditor {
      'config': any;
      'displayMessages': boolean;
      'heightLine': number;
      'heightPx': number;
      'horizontalLayout': boolean;
      'showDataviz': boolean;
      'theme': string;
      'url': string;
      'warpscript': string;
      'widthPx': number;
    }
  }

  interface HTMLWarpViewEditorElement extends StencilComponents.WarpViewEditor, HTMLStencilElement {}

  var HTMLWarpViewEditorElement: {
    prototype: HTMLWarpViewEditorElement;
    new (): HTMLWarpViewEditorElement;
  };
  interface HTMLElementTagNameMap {
    'warp-view-editor': HTMLWarpViewEditorElement;
  }
  interface ElementTagNameMap {
    'warp-view-editor': HTMLWarpViewEditorElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'warp-view-editor': JSXElements.WarpViewEditorAttributes;
    }
  }
  namespace JSXElements {
    export interface WarpViewEditorAttributes extends HTMLAttributes {
      'config'?: any;
      'displayMessages'?: boolean;
      'heightLine'?: number;
      'heightPx'?: number;
      'horizontalLayout'?: boolean;
      'onDatavizRequested'?: (event: CustomEvent) => void;
      'onErrorEvent'?: (event: CustomEvent) => void;
      'onStatusEvent'?: (event: CustomEvent) => void;
      'onWarpscriptChanged'?: (event: CustomEvent) => void;
      'onWarpscriptResult'?: (event: CustomEvent) => void;
      'showDataviz'?: boolean;
      'theme'?: string;
      'url'?: string;
      'warpscript'?: string;
      'widthPx'?: number;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface WarpViewResult {
      'config': object;
      'displayMessages': boolean;
      'result': {
    json: any[],
    error: string,
    message: string
  };
      'theme': string;
    }
  }

  interface HTMLWarpViewResultElement extends StencilComponents.WarpViewResult, HTMLStencilElement {}

  var HTMLWarpViewResultElement: {
    prototype: HTMLWarpViewResultElement;
    new (): HTMLWarpViewResultElement;
  };
  interface HTMLElementTagNameMap {
    'warp-view-result': HTMLWarpViewResultElement;
  }
  interface ElementTagNameMap {
    'warp-view-result': HTMLWarpViewResultElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'warp-view-result': JSXElements.WarpViewResultAttributes;
    }
  }
  namespace JSXElements {
    export interface WarpViewResultAttributes extends HTMLAttributes {
      'config'?: object;
      'displayMessages'?: boolean;
      'result'?: {
    json: any[],
    error: string,
    message: string
  };
      'theme'?: string;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
