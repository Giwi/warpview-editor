/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';

import '@giwisoft/wc-tabs';
import '@giwisoft/wc-split';
import {
  specialCommentCommands,
} from './lib/warpScriptParser';
import {
  Config,
} from './lib/config';


export namespace Components {

  interface WarpViewEditor {
    'abort': () => void;
    'config': Config | string;
    'debug': boolean;
    'displayMessages': boolean;
    'displayResult': (result: string) => void;
    'execute': () => void;
    'heightLine': number;
    'heightPx': number;
    'highlight': (line: number) => void;
    'horizontalLayout': boolean;
    'imageTab': boolean;
    'initialSize': { w?: number, h?: number, name?: string, p?: number };
    'resize': (initial: boolean) => void;
    'showDataviz': boolean;
    'showExecute': boolean;
    'showResult': boolean;
    'tabbed': boolean;
    'theme': string;
    'url': string;
    'warpscript': string;
    'widthPx': number;
  }
  interface WarpViewEditorAttributes extends StencilHTMLAttributes {
    'config'?: Config | string;
    'debug'?: boolean;
    'displayMessages'?: boolean;
    'heightLine'?: number;
    'heightPx'?: number;
    'horizontalLayout'?: boolean;
    'imageTab'?: boolean;
    'initialSize'?: { w?: number, h?: number, name?: string, p?: number };
    'onWarpViewEditorBreakPoint'?: (event: CustomEvent) => void;
    'onWarpViewEditorCtrlClick'?: (event: CustomEvent) => void;
    'onWarpViewEditorDatavizRequested'?: (event: CustomEvent) => void;
    'onWarpViewEditorErrorEvent'?: (event: CustomEvent) => void;
    'onWarpViewEditorLoaded'?: (event: CustomEvent) => void;
    'onWarpViewEditorSize'?: (event: CustomEvent) => void;
    'onWarpViewEditorStatusEvent'?: (event: CustomEvent) => void;
    'onWarpViewEditorWarpscriptChanged'?: (event: CustomEvent) => void;
    'onWarpViewEditorWarpscriptResult'?: (event: CustomEvent) => void;
    'showDataviz'?: boolean;
    'showExecute'?: boolean;
    'showResult'?: boolean;
    'tabbed'?: boolean;
    'theme'?: string;
    'url'?: string;
    'warpscript'?: string;
    'widthPx'?: number;
  }

  interface WarpViewImageResult {
    'config': object;
    'result': any[];
    'theme': string;
  }
  interface WarpViewImageResultAttributes extends StencilHTMLAttributes {
    'config'?: object;
    'result'?: any[];
    'theme'?: string;
  }

  interface WarpViewRawResult {
    'config': object;
    'heightLine': number;
    'heightPx': number;
    'result': any[];
    'theme': string;
  }
  interface WarpViewRawResultAttributes extends StencilHTMLAttributes {
    'config'?: object;
    'heightLine'?: number;
    'heightPx'?: number;
    'result'?: any[];
    'theme'?: string;
  }

  interface WarpViewResult {
    'config': object;
    'result': any[];
    'theme': string;
  }
  interface WarpViewResultAttributes extends StencilHTMLAttributes {
    'config'?: object;
    'result'?: any[];
    'theme'?: string;
  }
}

declare global {
  interface StencilElementInterfaces {
    'WarpViewEditor': Components.WarpViewEditor;
    'WarpViewImageResult': Components.WarpViewImageResult;
    'WarpViewRawResult': Components.WarpViewRawResult;
    'WarpViewResult': Components.WarpViewResult;
  }

  interface StencilIntrinsicElements {
    'warp-view-editor': Components.WarpViewEditorAttributes;
    'warp-view-image-result': Components.WarpViewImageResultAttributes;
    'warp-view-raw-result': Components.WarpViewRawResultAttributes;
    'warp-view-result': Components.WarpViewResultAttributes;
  }


  interface HTMLWarpViewEditorElement extends Components.WarpViewEditor, HTMLStencilElement {}
  var HTMLWarpViewEditorElement: {
    prototype: HTMLWarpViewEditorElement;
    new (): HTMLWarpViewEditorElement;
  };

  interface HTMLWarpViewImageResultElement extends Components.WarpViewImageResult, HTMLStencilElement {}
  var HTMLWarpViewImageResultElement: {
    prototype: HTMLWarpViewImageResultElement;
    new (): HTMLWarpViewImageResultElement;
  };

  interface HTMLWarpViewRawResultElement extends Components.WarpViewRawResult, HTMLStencilElement {}
  var HTMLWarpViewRawResultElement: {
    prototype: HTMLWarpViewRawResultElement;
    new (): HTMLWarpViewRawResultElement;
  };

  interface HTMLWarpViewResultElement extends Components.WarpViewResult, HTMLStencilElement {}
  var HTMLWarpViewResultElement: {
    prototype: HTMLWarpViewResultElement;
    new (): HTMLWarpViewResultElement;
  };

  interface HTMLElementTagNameMap {
    'warp-view-editor': HTMLWarpViewEditorElement
    'warp-view-image-result': HTMLWarpViewImageResultElement
    'warp-view-raw-result': HTMLWarpViewRawResultElement
    'warp-view-result': HTMLWarpViewResultElement
  }

  interface ElementTagNameMap {
    'warp-view-editor': HTMLWarpViewEditorElement;
    'warp-view-image-result': HTMLWarpViewImageResultElement;
    'warp-view-raw-result': HTMLWarpViewRawResultElement;
    'warp-view-result': HTMLWarpViewResultElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
